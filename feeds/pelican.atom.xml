<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>GTmanfred - Pelican</title><link href="https://blog.gtmanfred.com/" rel="alternate"></link><link href="https://blog.gtmanfred.com/feeds/pelican.atom.xml" rel="self"></link><id>https://blog.gtmanfred.com/</id><updated>2013-08-12T21:00:00-05:00</updated><entry><title>Why the hell would I want my own paste site? ¬Ø\(¬∞_o)/¬Ø</title><link href="https://blog.gtmanfred.com/paste-site.html" rel="alternate"></link><published>2013-08-12T21:00:00-05:00</published><updated>2013-08-12T21:00:00-05:00</updated><author><name>Daniel Wallace</name></author><id>tag:blog.gtmanfred.com,2013-08-12:/paste-site.html</id><summary type="html">&lt;p&gt;Probley because KaiSforza was complaining about it.&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Where to get everything&lt;/h1&gt;
&lt;h3&gt;Edit: perl-cpanplus-dist-arch&lt;/h3&gt;
&lt;p&gt;I now have the perl modules installed using cpanplus&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pacman -Syu perl-cpanplus-dist-arch
setupdistarch
cpanp i HTML::FromANSI
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will package them so that they are owned and maintained by pacman.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;‚îî‚îÄ‚ïº pacman -Si perl-html-fromansi                                        
Repository     : gtmanfred
Name           : perl-html-fromansi
Version        : 2.03-1
Description    : converts ANSI text sequences to corresponding HTML codes
Architecture   : any
URL            : http://search.cpan.org/~NUFFIN/HTML-FromANSI-2.03/
Licenses       : GPL  PerlArtistic
Groups         : None
Provides       : None
Depends On     : perl&amp;amp;gt;=5.10.0
Optional Deps  : None
Conflicts With : None
Replaces       : None
Download Size  :  12.35 KiB
Installed Size :  63.00 KiB
Packager       : Daniel Wallace &amp;amp;lt;danielwallace at gtmanfred dot com&amp;amp;gt;
Build Date     : Fri 09 Aug 2013 09:24:04 PM CDT
Validated By   : MD5 Sum  SHA256 Sum  Signature
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="http://git.server-speed.net/users/flo/filebin/"&gt;Filebin&lt;/a&gt; is pretty simple, all you need to do
is git clone it into your document root.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone git://git.server-speed.net/users/flo/filebin/ /srv/http/paste.gtmanfred.com
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Anything else need to be said? Oh right, I had problems with the cpan dependencies and what
not for HTML::FromANSI.  I ended up just installing them into my users ~/.cpan directory, then
just moving them to /usr/share/parl5/site_perl instead of packaging them because I didn't see
them in the Arch Linux repositories.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;perl-text-markdown
php-memcache
qrencode
python2-pygments
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And then a database, I chose to use mariadb because I have been using MySQL so much at work, i
want some practice with it outside of work as well.&lt;/p&gt;
&lt;h1&gt;Setting up the config files&lt;/h1&gt;
&lt;p&gt;So I just followed the instructions in
&lt;a href="http://git.server-speed.net/users/flo/filebin/tree/INSTALL"&gt;INSTALl&lt;/a&gt; for the most part.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd /srv/http/paste.gtmanfred.com
cp -av application/config/example/* application/config
cp -av data/local/examples/contact-info.php data/local/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next you need to setup the databases for mariadb or w/e databse you are going to use.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mysql -u root
MariaDB [(none)]&amp;amp;gt; create database pastes;
Query OK, 1 row affected (0.02 sec)

MariaDB [(none)]&amp;amp;gt; create user &amp;#39;pastes&amp;#39;@&amp;#39;localhost&amp;#39; identified by &amp;#39;&amp;amp;lt;password&amp;amp;gt;&amp;#39;;
Query OK, 0 rows affected (0.10 sec)

MariaDB [(none)]&amp;amp;gt; Grant all privileges on pastes.* to &amp;#39;pastes&amp;#39;@&amp;#39;localhost&amp;#39;;
Query OK, 0 rows affected (0.04 sec)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After this point, I started setting up the config-local.php like was described in
&lt;a href="http://git.server-speed.net/users/flo/filebin/tree/INSTALL"&gt;INSTALL&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;‚ïò‚ïêüò∏ tail -c +0 config-local.php database.php
==&amp;amp;gt; config-local.php &amp;amp;lt;==
&amp;amp;lt;?php  if ( ! defined(&amp;#39;BASEPATH&amp;#39;)) exit(&amp;#39;No direct script access allowed&amp;#39;);

/*
 * Use this file to override any settings from config.php
 */

// set this to a 32char random string
$config[&amp;#39;encryption_key&amp;#39;] = &amp;#39;&amp;amp;lt;insert any random string&amp;amp;gt;&amp;#39;;

// shouldn&amp;#39;t be served by the webserver
$config[&amp;#39;upload_path&amp;#39;] = FCPATH.&amp;#39;data/uploads&amp;#39;;

// don&amp;#39;t show index.php in the url
$config[&amp;#39;index_page&amp;#39;] = &amp;#39;&amp;#39;;


==&amp;amp;gt; database.php &amp;amp;lt;==
&amp;amp;lt;?php  if ( ! defined(&amp;#39;BASEPATH&amp;#39;)) exit(&amp;#39;No direct script access allowed&amp;#39;);
/*
| -------------------------------------------------------------------
| DATABASE CONNECTIVITY SETTINGS
| -------------------------------------------------------------------
| This file will contain the settings needed to access your database.
|
| For complete instructions please consult the &amp;#39;Database Connection&amp;#39;
| page of the User Guide.
|
| -------------------------------------------------------------------
| EXPLANATION OF VARIABLES
| -------------------------------------------------------------------
|
|   [&amp;#39;hostname&amp;#39;] The hostname of your database server.
|   [&amp;#39;username&amp;#39;] The username used to connect to the database
|   [&amp;#39;password&amp;#39;] The password used to connect to the database
|   [&amp;#39;database&amp;#39;] The name of the database you want to connect to
|   [&amp;#39;dbdriver&amp;#39;] The database type. ie: mysql.  Currently supported:
                 mysql, mysqli, postgre, odbc, mssql, sqlite, oci8
|   [&amp;#39;dbprefix&amp;#39;] You can add an optional prefix, which will be added
|                to the table name when using the  Active Record class
|   [&amp;#39;pconnect&amp;#39;] TRUE/FALSE - Whether to use a persistent connection
|   [&amp;#39;db_debug&amp;#39;] TRUE/FALSE - Whether database errors should be displayed.
|   [&amp;#39;cache_on&amp;#39;] TRUE/FALSE - Enables/disables query caching
|   [&amp;#39;cachedir&amp;#39;] The path to the folder where cache files should be stored
|   [&amp;#39;char_set&amp;#39;] The character set used in communicating with the database
|   [&amp;#39;dbcollat&amp;#39;] The character collation used in communicating with the database
|                NOTE: For MySQL and MySQLi databases, this setting is only used
|                as a backup if your server is running PHP &amp;amp;lt; 5.2.3 or MySQL &amp;amp;lt; 5.0.7
|                (and in table creation queries made with DB Forge).
|                There is an incompatibility in PHP with mysql_real_escape_string() which
|                can make your site vulnerable to SQL injection if you are using a
|                multi-byte character set and are running versions lower than these.
|                Sites using Latin-1 or UTF-8 database character set and collation are unaffected.
|   [&amp;#39;swap_pre&amp;#39;] A default table prefix that should be swapped with the dbprefix
|   [&amp;#39;autoinit&amp;#39;] Whether or not to automatically initialize the database.
|   [&amp;#39;stricton&amp;#39;] TRUE/FALSE - forces &amp;#39;Strict Mode&amp;#39; connections
|                           - good for ensuring strict SQL while developing
|
| The $active_group variable lets you choose which connection group to
| make active.  By default there is only one group (the &amp;#39;default&amp;#39; group).
|
| The $active_record variables lets you determine whether or not to load
| the active record class
*/

$active_group = &amp;#39;default&amp;#39;;
$active_record = TRUE;

$db[&amp;#39;default&amp;#39;][&amp;#39;hostname&amp;#39;] = &amp;quot;localhost&amp;quot;;
$db[&amp;#39;default&amp;#39;][&amp;#39;username&amp;#39;] = &amp;quot;pastes&amp;quot;;
$db[&amp;#39;default&amp;#39;][&amp;#39;password&amp;#39;] = &amp;quot;&amp;amp;lt;password&amp;amp;gt;&amp;quot;;
$db[&amp;#39;default&amp;#39;][&amp;#39;database&amp;#39;] = &amp;quot;pastes&amp;quot;;
$db[&amp;#39;default&amp;#39;][&amp;#39;dbdriver&amp;#39;] = &amp;quot;mysqli&amp;quot;;
$db[&amp;#39;default&amp;#39;][&amp;#39;dbprefix&amp;#39;] = &amp;quot;&amp;quot;;
$db[&amp;#39;default&amp;#39;][&amp;#39;pconnect&amp;#39;] = TRUE;
$db[&amp;#39;default&amp;#39;][&amp;#39;db_debug&amp;#39;] = TRUE;
$db[&amp;#39;default&amp;#39;][&amp;#39;cache_on&amp;#39;] = FALSE;
$db[&amp;#39;default&amp;#39;][&amp;#39;cachedir&amp;#39;] = &amp;quot;&amp;quot;;
$db[&amp;#39;default&amp;#39;][&amp;#39;char_set&amp;#39;] = &amp;quot;utf8&amp;quot;;
$db[&amp;#39;default&amp;#39;][&amp;#39;dbcollat&amp;#39;] = &amp;quot;utf8_bin&amp;quot;;
$db[&amp;#39;default&amp;#39;][&amp;#39;swap_pre&amp;#39;] = &amp;#39;&amp;#39;;
$db[&amp;#39;default&amp;#39;][&amp;#39;autoinit&amp;#39;] = TRUE;
$db[&amp;#39;default&amp;#39;][&amp;#39;stricton&amp;#39;] = FALSE;


/* End of file database.php */
/* Location: ./application/config/database.php */
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Creating your first user&lt;/h1&gt;
&lt;p&gt;Go to http://&lt;domain&gt;/user/hash_password and you can create a password hash for your first
user. Then just add them to the mysql database, at this point your tables should have been
generated.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;insert into users (username,password,email,referer) values (&amp;#39;username&amp;#39;, &amp;#39;above hash password&amp;#39;, &amp;#39;email&amp;#39;, 0);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You should now have everything you need to login, but only on the website. I was unable to get
nginx to pass on the HTTP_AUTHORIZATION header to uwsgi.  Then apikeys were implemented this
same weekend, so I no longer care about them!  &lt;a href="http://paste.gtmanfred.com/user/apikeys"&gt;APIKEYS&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Setting up nginx and uwsgi&lt;/h1&gt;
&lt;p&gt;I struggled with this part because I didn't actually read all of the config.php.  Turns out if
you want to get rid of the index.php from the url, you need to make sure to set
&lt;code&gt;$config['index_page'] = ''&lt;/code&gt; and then you can be on your merry way. Below are my nginx and
uwsgi config files.  Remember I am using Uwsgi, but you should be able to mimic this easily
with fcgiwrap.  Also, I am using the uwsgi@.service and uwsgi@.socket from the Arch Linux
package.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;‚îî‚îÄ‚ïº&lt;/span&gt; &lt;span class="nt"&gt;tail&lt;/span&gt; &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nt"&gt;0&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;nginx&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;conf&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;paste&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;gtmanfred&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;conf&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;uwsgi&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;paste&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ini&lt;/span&gt;
&lt;span class="o"&gt;==&amp;amp;&lt;/span&gt;&lt;span class="nt"&gt;gt&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;nginx&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;conf&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;paste&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;gtmanfred&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;conf&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nt"&gt;lt&lt;/span&gt;&lt;span class="o"&gt;;==&lt;/span&gt;
&lt;span class="nt"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;listen&lt;/span&gt; &lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;server_name&lt;/span&gt; &lt;span class="err"&gt;paste.gtmanfred.com&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;root&lt;/span&gt; &lt;span class="err"&gt;/srv/http/paste.gtmanfred.com&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;index&lt;/span&gt; &lt;span class="err"&gt;index.php&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;error_log&lt;/span&gt; &lt;span class="err"&gt;/var/log/nginx/paste.gtmanfred.com-error_log&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;rewrite_log&lt;/span&gt; &lt;span class="err"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;location&lt;/span&gt; &lt;span class="err"&gt;/&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="err"&gt;try_files&lt;/span&gt; &lt;span class="err"&gt;$uri&lt;/span&gt; &lt;span class="err"&gt;$uri/&lt;/span&gt; &lt;span class="err"&gt;@ee&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nt"&gt;location&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;ee&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;rewrite&lt;/span&gt; &lt;span class="o"&gt;^(.*)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;php&lt;/span&gt;&lt;span class="o"&gt;?$&lt;/span&gt;&lt;span class="nt"&gt;1&lt;/span&gt; &lt;span class="nt"&gt;last&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nt"&gt;location&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;php&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="err"&gt;include&lt;/span&gt; &lt;span class="err"&gt;uwsgi_params&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="err"&gt;uwsgi_modifier1&lt;/span&gt; &lt;span class="err"&gt;14&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="err"&gt;uwsgi_pass&lt;/span&gt; &lt;span class="n"&gt;localhost&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8090&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="err"&gt;uwsgi_pass_request_headers&lt;/span&gt; &lt;span class="err"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="err"&gt;uwsgi_pass_header&lt;/span&gt; &lt;span class="err"&gt;HTTP_AUTHENTICATION&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="err"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;==&amp;amp;&lt;/span&gt;&lt;span class="nt"&gt;gt&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;uwsgi&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;paste&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ini&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nt"&gt;lt&lt;/span&gt;&lt;span class="o"&gt;;==&lt;/span&gt;

&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;uwsgi&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="nt"&gt;load&lt;/span&gt; &lt;span class="nt"&gt;plugins&lt;/span&gt;
&lt;span class="nt"&gt;plugins&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;php&lt;/span&gt;

&lt;span class="nt"&gt;gid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;users&lt;/span&gt;
&lt;span class="nt"&gt;uid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;git&lt;/span&gt;


&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="nt"&gt;our&lt;/span&gt; &lt;span class="nt"&gt;working&lt;/span&gt; &lt;span class="nt"&gt;dir&lt;/span&gt;
&lt;span class="nt"&gt;project_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;srv&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;http&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;paste&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;gtmanfred&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;com&lt;/span&gt;

&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="nt"&gt;chdir&lt;/span&gt; &lt;span class="nt"&gt;to&lt;/span&gt; &lt;span class="nt"&gt;it&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;just&lt;/span&gt; &lt;span class="nt"&gt;for&lt;/span&gt; &lt;span class="nt"&gt;fun&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nt"&gt;chdir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;%(&lt;/span&gt;&lt;span class="nt"&gt;project_dir&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;


&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="nt"&gt;reload&lt;/span&gt; &lt;span class="nt"&gt;whenever&lt;/span&gt; &lt;span class="nt"&gt;this&lt;/span&gt; &lt;span class="nt"&gt;config&lt;/span&gt; &lt;span class="nt"&gt;file&lt;/span&gt; &lt;span class="nt"&gt;changes&lt;/span&gt;
&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="nt"&gt;is&lt;/span&gt; &lt;span class="nt"&gt;the&lt;/span&gt; &lt;span class="nt"&gt;full&lt;/span&gt; &lt;span class="nt"&gt;path&lt;/span&gt; &lt;span class="nt"&gt;of&lt;/span&gt; &lt;span class="nt"&gt;the&lt;/span&gt; &lt;span class="nt"&gt;current&lt;/span&gt; &lt;span class="nt"&gt;config&lt;/span&gt; &lt;span class="nt"&gt;file&lt;/span&gt;
&lt;span class="nt"&gt;touch-reload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;

&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="nt"&gt;run&lt;/span&gt; &lt;span class="nt"&gt;with&lt;/span&gt; &lt;span class="nt"&gt;at&lt;/span&gt; &lt;span class="nt"&gt;least&lt;/span&gt; &lt;span class="nt"&gt;2&lt;/span&gt; &lt;span class="nt"&gt;processes&lt;/span&gt; &lt;span class="nt"&gt;but&lt;/span&gt; &lt;span class="nt"&gt;increase&lt;/span&gt; &lt;span class="nt"&gt;upto&lt;/span&gt; &lt;span class="nt"&gt;8&lt;/span&gt; &lt;span class="nt"&gt;when&lt;/span&gt; &lt;span class="nt"&gt;needed&lt;/span&gt;
&lt;span class="nt"&gt;master&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;true&lt;/span&gt;
&lt;span class="nt"&gt;processes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;8&lt;/span&gt;
&lt;span class="nt"&gt;cheaper&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;2&lt;/span&gt;

&lt;span class="nt"&gt;logto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;log&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;filebin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;php&lt;/span&gt;
&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="nt"&gt;rotate&lt;/span&gt; &lt;span class="nt"&gt;logs&lt;/span&gt; &lt;span class="nt"&gt;when&lt;/span&gt; &lt;span class="nt"&gt;filesize&lt;/span&gt; &lt;span class="nt"&gt;is&lt;/span&gt; &lt;span class="nt"&gt;higher&lt;/span&gt; &lt;span class="nt"&gt;than&lt;/span&gt; &lt;span class="nt"&gt;20&lt;/span&gt; &lt;span class="nt"&gt;megs&lt;/span&gt;
&lt;span class="nt"&gt;log-maxsize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;20971520&lt;/span&gt;

&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="nt"&gt;map&lt;/span&gt; &lt;span class="nt"&gt;php&lt;/span&gt; &lt;span class="nt"&gt;modifier&lt;/span&gt; &lt;span class="nt"&gt;as&lt;/span&gt; &lt;span class="nt"&gt;the&lt;/span&gt; &lt;span class="nt"&gt;default&lt;/span&gt;
&lt;span class="nt"&gt;static-skip-ext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;php&lt;/span&gt;
&lt;span class="nt"&gt;php-allowed-ext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;php&lt;/span&gt;
&lt;span class="nt"&gt;php-allowed-ext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;inc&lt;/span&gt;
&lt;span class="nt"&gt;php-index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;php&lt;/span&gt;

&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="nt"&gt;show&lt;/span&gt; &lt;span class="nt"&gt;config&lt;/span&gt; &lt;span class="nt"&gt;tree&lt;/span&gt; &lt;span class="nt"&gt;on&lt;/span&gt; &lt;span class="nt"&gt;startup&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;just&lt;/span&gt; &lt;span class="nt"&gt;to&lt;/span&gt; &lt;span class="nt"&gt;see&lt;/span&gt;
&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="nt"&gt;how&lt;/span&gt; &lt;span class="nt"&gt;cool&lt;/span&gt; &lt;span class="nt"&gt;is&lt;/span&gt; &lt;span class="nt"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;1&lt;/span&gt; &lt;span class="nt"&gt;config&lt;/span&gt; &lt;span class="nt"&gt;logic&lt;/span&gt;
&lt;span class="nt"&gt;show-config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then I just have to enable and start uwsgi@paste.socket and reload nginx.&lt;/p&gt;
&lt;h1&gt;fb-client&lt;/h1&gt;
&lt;p&gt;For fbclient, just add &lt;code&gt;pastebin=&amp;lt;yourdomain&amp;gt;&lt;/code&gt; to ~/.config/fb-client/config and put your
apikey in ~/.config/fb-client/apikey.  And thats it!&lt;/p&gt;
&lt;p&gt;&lt;img alt="Otter Cups" src="http://24.media.tumblr.com/96650b63d82b941132ef103b3e9b9581/tumblr_mhym5ps8zn1rikt3no1_400.gif"&gt;&lt;/p&gt;</content><category term="pastebin"></category></entry><entry><title>How I setup Pelican and Git</title><link href="https://blog.gtmanfred.com/setting-up-pelican-and-git.html" rel="alternate"></link><published>2013-07-20T20:09:00-05:00</published><updated>2013-07-20T20:09:00-05:00</updated><author><name>Daniel Wallace</name></author><id>tag:blog.gtmanfred.com,2013-07-20:/setting-up-pelican-and-git.html</id><summary type="html">&lt;p&gt;why won't it work...&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Getting Markdown and Git to work in Pelican&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/getpelican/pelican-themes"&gt;get pelican&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ok! so this was a fun experiment.  I wanted to be able to run git push and have everything be
published automagically to the website.&lt;/p&gt;
&lt;p&gt;While I am posting this first blog post I am still testing out some kinks and getting
everything to work correctly.  And as I say that... everything works... except pelican doesn't
default to using .mkd files. Silly vim-markdown not recognizing the .md suffix.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;OK here is where I got everything working correctly(and I broke it)&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;Setting up the pelican user!&lt;/h3&gt;
&lt;p&gt;To keep everything clean on my server and also to prevent me from having to install a whole
shitton of extra python packages, I am just using a virtualenv and managing everything from a
seperate user.  In my pelican users home directory, there are 3 extra directories.&lt;/p&gt;
&lt;h3&gt;Blog Virtual Environment&lt;/h3&gt;
&lt;p&gt;First off is ~/blogenv/. In this directory we have our virtual environment.  Because I am
using Arch Linux, and we default to python3, I was very happy to see pelican is compatible
with python3.  Once you have whatever python-virtualenv package your distribution comes with,
just make the virtual environment and install pelican.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;virtualenv ~/blogenv
source ~/blogenv/bin/activate
pip install -e git://github.com/getpelican/pelican.git#egg=pelican
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you are wanting to use markdown, you will need to pip install it as well.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install Markdown
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I prefer to use the git repository for pelican, feel free to use the version from pypi.  A
nice tip, since we are only going to ever use this user for that virtual environment is to
just add source ~/blogenv/bin/activate in your ~/.bashrc so that we always get the environment
when using bash.&lt;/p&gt;
&lt;h3&gt;Start blog&lt;/h3&gt;
&lt;p&gt;Next we need to setup our blog environment.  This one is really simple, just run the
pelican-quickstart command and answer all the questions that it asks.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pelican-quickstart -p ~/blog
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you really wanted, you could stop here.  You just write your blog posts in the content
directory under ~/blog.  Once you have written something, run make in ~/blog and your html
files will be put in ~/blog/output.  Then just host the blog with nginx or an equivalent HTTP
server.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;server {
    listen 80;
    server_name blog.gtmanfred.com blag.gtmanfred.com;
    root /home/pelican/blog/output;
    index index.html;
    location ~ ^/feeds {
        autoindex on
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Setting up git&lt;/h3&gt;
&lt;p&gt;If you are like me, you like it when things are automated.  This is where git comes in to keep
track of your blog posts and files.  This way we only have to keep track of a small number of
files and don't have to worry about the rest of the pelican files if we don't want.&lt;/p&gt;
&lt;p&gt;Start out with making your blog git repository on your localmachine and initialize it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir ~/gitrepos/blogposts
cd ~/gitrepos/blogposts
git init
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After this you will want to go ahead and copy over your pelicanconf.py from the ~/blog
directory on the remote device to your local git repository.  Now git add it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git add pelicanconf.py
git commit -m &amp;quot;First Commit -&amp;amp;gt; Starting new blog!&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we need to go back to the pelican user on your remote machine with the pelican
subdirectory.  I personally kept with the blog directory naming theme and initialized a bare
repo for my blog.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir ~pelican/bloggit
cd ~pelican/bloggit
git init --bare
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we can go ahead and setup out githook that is going to do all the work for us.  Copy the
following into ~/bloggit/hooks/post-update.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env bash&lt;/span&gt;
&lt;span class="nb"&gt;source&lt;/span&gt; ~/blogenv/bin/activate
&lt;span class="nv"&gt;GIT_WORK_TREE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/home/pelican/blog git checkout -f
&lt;span class="nb"&gt;pushd&lt;/span&gt; ~/blog
make publish
&lt;span class="nb"&gt;popd&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Be sure to &lt;code&gt;chmod +x&lt;/code&gt; the file as well.&lt;/p&gt;
&lt;p&gt;I know what you are thinking! Why do we have to source bin/activate in the git hook if we are
already sourcing it in .bash_profile? Well, this script won't read .bash_profile.  There are
ways to make it read that file, such as adding --login after the bash call, but this is rather
messy and and one extra line isn't a big deal.&lt;/p&gt;
&lt;p&gt;Now, back on your local machine, lets make a markdown file to publish our first blogpost.  In
your git repository, make a contents directory and write a blog post.  Here is an example if
you don't want to spend the time right now.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/getpelican/pelican/blob/master/docs/getting_started.rst#file-metadata"&gt;From the pelican documentation&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;My&lt;/span&gt; &lt;span class="kd"&gt;super&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;
&lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2010&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;03&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="n"&gt;Category&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;
&lt;span class="n"&gt;Tags&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pelican&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;publishing&lt;/span&gt;
&lt;span class="n"&gt;Slug&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;my&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;
&lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Alexis&lt;/span&gt; &lt;span class="n"&gt;Metaireau&lt;/span&gt;
&lt;span class="n"&gt;Summary&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Short&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;feeds&lt;/span&gt;

&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;my&lt;/span&gt; &lt;span class="kd"&gt;super&lt;/span&gt; &lt;span class="n"&gt;blog&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Place this in a file ending with .md for your git repository.  We now need to setup the remote
git repository and push to it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git remote add website pelican@blog.gtmanfred.com:bloggit
git remote update
git push -u website master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This should generate the blog posts and you should be able to use the same nginx.conf server
from above.&lt;/p&gt;
&lt;h3&gt;I am a bit weird about my nginx configurations and /home&lt;/h3&gt;
&lt;p&gt;Now when I was writing this post I removed a few bits and pieces from my actual setup, just
beacuse I am peculiar.  The Makefile for pelican recognizes the environment variable OUTPUTDIR
for where you want output set to... so I set it to /srv/http/blog.gtmanfred.com.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env bash&lt;/span&gt;
&lt;span class="nb"&gt;source&lt;/span&gt; ~/blogenv/bin/activate
&lt;span class="nv"&gt;GIT_WORK_TREE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/home/pelican/blog git checkout -f
make -C ~/blog &lt;span class="nv"&gt;OUTPUTDIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/srv/http/blog.gtmanfred.com/ publish
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Again, be sure to &lt;code&gt;chmod +x&lt;/code&gt; the hook.&lt;/p&gt;
&lt;p&gt;I also wanted to use &lt;a href="https://github.com/plasticboy/vim-markdown"&gt;vim-markdown&lt;/a&gt;, and I use
pathogen, so I just cloned the git repo into ~/.config/vim/bundle (yes .config ... it is a
long story).  Because &lt;a href="https://github.com/plasticboy/vim-markdown"&gt;vim-markdown&lt;/a&gt; only uses
.mkd suffix, I had to add the following to pelicanconf.py.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;MARKUP = (&amp;quot;mkd&amp;quot;,)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Don't forget the , because python is expecting a list.&lt;/p&gt;
&lt;h3&gt;Summary&lt;/h3&gt;
&lt;p&gt;I Hope to be doing a lot more of these blog posts now that I can remove the vim blogit plugin
because Wordpress truely sucks.&lt;/p&gt;</content><category term="pelican"></category><category term="git"></category><category term="publishing"></category></entry></feed>